#!/usr/bin/env ruby

VERSION='1.0.0'

$:.unshift File.expand_path('../../lib', __FILE__)
require 'hashie'
require 'devops_api'
require 'pry'
require 'awesome_print'
require 'csv'
require 'httparty'

class ArinApi
  include HTTParty
  base_uri 'http://whois.arin.net/rest'
  format :json
  headers 'Accept' => 'application/json'
end

class Api
  include DevopsApi
end

def is_32? string
  string =~ /(0\.0\.0\.0\/0|32)$/
end

begin

  opts = Slop.parse(strict: true, help: true) do
    banner "Security Group Report, version #{VERSION}\n\nUsage: security_group_report [options]"
    on 'p', 'profiles', '[required] The AWS credential profile(s) to use.', argument: true
    on 'v', 'version' do
      puts "Security Group Report, version #{VERSION}"
      exit 0
    end
  end

  opts_slop = opts
  opts = Hashie::Mash.new(opts_slop.to_hash)

  # Profile required test
  raise DevopsApi::Exceptions::MissingReqiredOption, 'AWS Profile(s) name required!' unless opts.profiles?

  profiles = opts.profiles.split(',')
  api = Api.new(profiles[0])

  # caller_reference = "domain_import_#{Time.now.strftime("%Y%m%d%H%M%S")}"

  puts '# Environments to report on ###########################################'
  puts ''
  ap profiles
  puts ''

  puts '# Creating report #####################################################'
  puts ''
  CSV.open("security_group_report_#{Time.now.strftime('%Y%m%d%H%M%S')}.csv", 'wb') do |csv|
    csv << ['ENVIRONMENT', 'REGION', 'SG_NAME', 'SG_ID', 'FROM_PORT', 'TO_PORT', 'INGRESS', 'EGRESS', 'CIRD_IP', 'ARIN_ORG_NAME']
    profiles.each do |profile|
      puts "# Starting searching 32s in \"#{profile}\" ###############################################"[0..70]
      regions = api.ec2_client.describe_regions.regions.map{|r| r.region_name }
      regions.each do |region|
        puts "For region: #{region}..."
        print 'Found? '
        api_for_region = Api.new(profile, region)
        api_for_region.ec2_client.describe_security_groups.security_groups.each do |sg|
          sg.ip_permissions.each do |ingress|
            next if ingress.ip_ranges.empty?
            ingress.ip_ranges.map{|range| range.cidr_ip }.each do |ip|
              next unless is_32? ip
              arin_resp = ArinApi.get("/ip/#{ip.split('/')[0]}")
              arin_org_ref = arin_resp['net']['orgRef'].nil? ? arin_resp['net']['customerRef']['@name'] : arin_resp['net']['orgRef']['@name']
              print '✔︎'
              row = []
              row << profile
              row << region
              row << sg.group_name
              row << sg.group_id
              row << ingress.from_port
              row << ingress.to_port
              row << true
              row << false
              row << ip
              row << arin_org_ref
              csv << row
            end
          end
          sg.ip_permissions_egress.each do |ingress|
            next if ingress.ip_ranges.empty?
            ingress.ip_ranges.map{|range| range.cidr_ip }.each do |ip|
              next unless is_32? ip
              arin_resp = ArinApi.get("/ip/#{ip.split('/')[0]}")
              arin_org_ref = arin_resp['net']['orgRef'].nil? ? arin_resp['net']['customerRef']['@name'] : arin_resp['net']['orgRef']['@name']
              print '✔︎'
              row = []
              row << profile
              row << region
              row << sg.group_name
              row << sg.group_id
              row << ingress.from_port
              row << ingress.to_port
              row << false
              row << true
              row << ip
              row << arin_org_ref
              csv << row
            end
          end
        end
        puts ''
      end
      puts ''
    end
  end

  puts '# REPORT COMPLETE #####################################################'
  puts ''

rescue DevopsApi::Exceptions::MissingReqiredOption => e
  puts ''
  puts "ERROR: #{e.message}"
  puts ''
  puts opts_slop
  exit 1
rescue => e
  puts ''
  puts "ERROR: #{e.class}"
  puts "ERROR: #{e.message}"
  puts "ERROR: #{e.backtrace.join("\nERROR: ")}"
  puts ''
  puts opts_slop
  exit 1
end
