#!/usr/bin/env ruby

VERSION='1.0.0'

$:.unshift File.expand_path('../../lib', __FILE__)
require 'hashie'
require 'pry'
require 'awesome_print'
require 'csv'
require 'ruby-progressbar'
require 'httparty'
require 'pry'

class Whois
  include HTTParty
  base_uri 'https://www.whoisxmlapi.com/whoisserver'
  default_params username: 'apotter_uni', password: 'xxxxxxxxxxx', outputFormat: 'JSON', da: 2
end

begin

  opts = Slop.parse(strict: true, help: true) do
    banner "Domain Cutover List Hosted Zones, version #{VERSION}\n\nUsage: domain_list_route53 [options]"
    on 'f', 'file', '[required] The location of the csv file to be tested.', argument: true
    on 'v', 'version' do
      puts 'domain cutover, version #{version}'
      exit 0
    end
  end

  opts = Hashie::Mash.new(opts.to_hash)

  # Profile required test
  raise 'Location of config YAML [-f PATHTOYAML] required!' unless opts.file?
  opts.file = File.expand_path( opts.file )
  raise 'YAML file not found' unless File.exist?( opts.file )

  yml = YAML.load_file( opts.file )
  domains = yml['domains'].map{|d| Hashie::Mash.new(d) }

  ap domains

  CSV.open("domain_report_#{Time.now.strftime("%Y%m%d%H%M%S")}.csv", "wb") do |csv|
    csv << ["DOMAIN", "REGISTRAR", "REGISTRANT_ORG", "FIRST_NS"]
    domains.each do |domain|
      begin
        row = []
        query = Whois.get("/WhoisService", query: {
          domainName: domain.name
        })
        resp = JSON.parse(query.body)
        resp.extend Hashie::Extensions::DeepFetch
        row << domain.name
        if query.code == 200 && !resp.deep_fetch('WhoisRecord', 'registryData', 'dataError'){|k| false} && !resp.deep_fetch('WhoisRecord', 'dataError'){|k| false} && !resp.deep_fetch('ErrorMessage'){|k| false}
          row << resp['WhoisRecord']['registrarName']
          if resp.deep_fetch('WhoisRecord', 'registrant', 'organization') {|k| false}
            row << resp['WhoisRecord']['registrant']['organization']
          elsif resp.deep_fetch('WhoisRecord', 'registryData', 'registrant', 'organization') {|k| false}
            row << resp['WhoisRecord']['registryData']['registrant']['organization']
          else
            row << nil
          end
          row << resp['WhoisRecord']['registryData']['nameServers']['hostNames'][0]
        else
          row << nil
          row << nil
          row << nil
        end
        ap row
        csv << row
      rescue => e
        binding.pry
        puts "#{domain} already created"
        ap e
        puts ''
      end
    end
  end

rescue => e
  puts ''
  puts e.message
  puts ''
end
